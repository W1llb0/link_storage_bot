import { Injectable, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import * as TelegramBot from 'node-telegram-bot-api';
import { isURL } from 'validator';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: TelegramBot;
  private userStates = new Map<number, { state: string; page?: number }>();

  constructor(private readonly prisma: PrismaClient) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error(
        'TELEGRAM_BOT_TOKEN is not defined in environment variables',
      );
    }
    this.bot = new TelegramBot(token, { polling: true });
  }

  onModuleInit() {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'Save üîñ' }, { text: 'List üìã' }],
          [{ text: 'Delete ‚ùå' }, { text: 'Get üîç' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    };

    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Save üîñ', callback_data: 'save' },
            { text: 'List üìã', callback_data: 'list' },
          ],
          [
            { text: 'Delete ‚ùå', callback_data: 'delete' },
            { text: 'Get üîç', callback_data: 'get' },
          ],
        ],
      },
    };

    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;

      this.bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', keyboard);

      this.bot.sendMessage(
        chatId,
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

Save üîñ - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É
List üìã - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫
Delete ‚ùå - —É–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É
Get üîç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ –µ—ë id

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:`,
        inlineKeyboard,
      );
    });

    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text;

      if (text.startsWith('/')) {
        return;
      }

      if (text === 'Save üîñ') {
        this.userStates.set(userId, { state: 'awaiting_save' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∞.',
        );
      } else if (text === 'List üìã') {
        this.userStates.set(userId, { state: 'browsing_list', page: 1 });
        await this.handleList(chatId, userId, 1);
      } else if (text === 'Delete ‚ùå') {
        this.userStates.set(userId, { state: 'awaiting_delete' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.',
        );
      } else if (text === 'Get üîç') {
        this.userStates.set(userId, { state: 'awaiting_get' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.',
        );
      } else {
        const userState = this.userStates.get(userId);

        if (userState?.state === 'awaiting_save') {
          await this.handleSave(chatId, userId, text);
          this.userStates.delete(userId);
        } else if (userState?.state === 'awaiting_delete') {
          await this.handleDelete(chatId, userId, text);
          this.userStates.delete(userId);
        } else if (userState?.state === 'awaiting_get') {
          await this.handleGet(chatId, text);
          this.userStates.delete(userId);
        } else {
          this.bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
      }
    });

    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message.chat.id;
      const userId = callbackQuery.from.id;
      const data = callbackQuery.data;

      if (data === 'save') {
        this.userStates.set(userId, { state: 'awaiting_save' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∞.',
        );
      } else if (data === 'list') {
        this.userStates.set(userId, { state: 'browsing_list', page: 1 });
        await this.handleList(chatId, userId, 1);
      } else if (data === 'delete') {
        this.userStates.set(userId, { state: 'awaiting_delete' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.',
        );
      } else if (data === 'get') {
        this.userStates.set(userId, { state: 'awaiting_get' });
        this.bot.sendMessage(
          chatId,
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.',
        );
      } else if (data === 'prev' || data === 'next') {
        const userState = this.userStates.get(userId);
        if (userState?.state === 'browsing_list') {
          let newPage = userState.page;
          newPage = data === 'prev' ? newPage - 1 : newPage + 1;
          if (newPage < 1) newPage = 1;
          this.userStates.set(userId, {
            state: 'browsing_list',
            page: newPage,
          });
          await this.handleList(chatId, userId, newPage);
        }
      }

      this.bot.answerCallbackQuery(callbackQuery.id);
    });
  }

  private async handleSave(chatId: number, userId: number, text: string) {
    const [name, url] = text.split(' ');
    if (name && url) {
      if (isURL(url)) {
        try {
          const link = await this.prisma.link.create({
            data: {
              name,
              url,
              userId,
            },
          });
          this.bot.sendMessage(
            chatId,
            `–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: ${link.id}`,
          );
        } catch (error) {
          if (error.code === 'P2002') {
            this.bot.sendMessage(chatId, '–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
          } else {
            this.bot.sendMessage(
              chatId,
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.',
            );
          }
        }
      } else {
        this.bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL.');
      }
    } else {
      this.bot.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∞.',
      );
    }
  }

  private async handleList(chatId: number, userId: number, page: number) {
    const pageSize = 5;
    const links = await this.prisma.link.findMany({
      where: { userId },
      skip: (page - 1) * pageSize,
      take: pageSize,
      select: { id: true, name: true, url: true, createdAt: true },
    });

    if (links.length === 0) {
      this.bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.');
      return;
    }

    let response = `–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):\n`;
    links.forEach((link) => {
      response += `ID: ${link.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${link.name}\nURL: ${link.url}\n–°–æ–∑–¥–∞–Ω–æ: ${link.createdAt}\n\n`;
    });

    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: 'prev' },
            { text: '–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: 'next' },
          ],
        ],
      },
    };

    this.bot.sendMessage(chatId, response, inlineKeyboard);
  }

  private async handleDelete(chatId: number, userId: number, text: string) {
    const id = parseInt(text);

    try {
      const link = await this.prisma.link.findUnique({ where: { id } });
      if (!link) {
        this.bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }
      if (link.userId !== userId) {
        this.bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É.');
        return;
      }

      await this.prisma.link.delete({ where: { id } });
      this.bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
    } catch (error) {
      this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.');
    }
  }

  private async handleGet(chatId: number, text: string) {
    const id = parseInt(text);

    const link = await this.prisma.link.findUnique({ where: { id } });

    if (link) {
      this.bot.sendMessage(chatId, `URL: ${link.url}`);
    } else {
      this.bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
  }
}
